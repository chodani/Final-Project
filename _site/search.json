[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Final Project",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\nlibrary(readxl)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(writexl)\nlibrary(stringr)\nlibrary(rstanarm)\n\nLoading required package: Rcpp\nThis is rstanarm version 2.21.4\n- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!\n- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.\n- For execution on a local, multicore CPU with excess RAM we recommend calling\n  options(mc.cores = parallel::detectCores())\n\n\n\nprem &lt;- read_excel(\"EPL_Payroll.xlsx\")\n\n\nx &lt;- prem |&gt;\n  select(\"Season\", \"Rk\", \"Squad\", \"Annual Wages\", \"Standing\") |&gt;\n  mutate(annual = str_extract(`Annual Wages`, \"\\\\$[0-9,]+\")) |&gt;\n  mutate(annual = as.numeric(gsub(\"[$,]\", \"\", annual))) |&gt;\n  select(-`Annual Wages`)\n\n\nx\n\n# A tibble: 200 × 5\n   Season    Rk Squad          Standing    annual\n    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;     &lt;dbl&gt;\n 1   2022     6 Arsenal               2 129210591\n 2   2022     7 Aston Villa           7 127888743\n 3   2022    18 Bournemouth          15  48842265\n 4   2022    20 Brentford             9  40845084\n 5   2022    19 Brighton              6  48776174\n 6   2022     3 Chelsea              12 241567629\n 7   2022    12 Crystal Palace       11  84928703\n 8   2022     8 Everton              17 107796661\n 9   2022    13 Fulham               10  69066531\n10   2022    17 Leeds United         19  62754708\n# ℹ 190 more rows\n\n\n\nfit_1 &lt;- stan_glm(Standing ~ Rk,\n                  data = x,\n                  family = gaussian,\n                  refresh = 0)\n\n\nfit_1\n\nstan_glm\n family:       gaussian [identity]\n formula:      Standing ~ Rk\n observations: 200\n predictors:   2\n------\n            Median MAD_SD\n(Intercept) 3.3    0.6   \nRk          0.7    0.1   \n\nAuxiliary parameter(s):\n      Median MAD_SD\nsigma 4.2    0.2   \n\n------\n* For help interpreting the printed output see ?print.stanreg\n* For info on the priors used see ?prior_summary.stanreg\n\n\n\nnewobs &lt;- tibble(Rk = 1:20)\n\npe &lt;- posterior_epred(fit_1, newdata = newobs) |&gt; \n  as_tibble() |&gt;\n  pivot_longer(cols = `1`:`20`,\n               names_to = \"rank\",\n               values_to = \"standing\") \npe |&gt;\n  ggplot(aes(x = rank, y = standing)) +\n  geom_point(alpha = 0.5) \n\n\n\npe\n\n# A tibble: 80,000 × 2\n   rank  standing\n   &lt;chr&gt;    &lt;dbl&gt;\n 1 1         4.40\n 2 2         5.05\n 3 3         5.70\n 4 4         6.36\n 5 5         7.01\n 6 6         7.66\n 7 7         8.31\n 8 8         8.96\n 9 9         9.61\n10 10       10.3 \n# ℹ 79,990 more rows\n\n\n\nx |&gt;\n  ggplot(aes(x = Rk, y = Standing)) +\n  geom_jitter(alpha = 0.5) +\n  scale_x_reverse() +\n  scale_y_reverse() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(title = \"Payroll Rank vs. Season Standing in the EPL\",\n       subtitle = \"There is a positive correlation between the two\",\n       x = \"Payroll Rank\",\n       y = \"Season Standing\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nx |&gt;\n  summarise(.by = Season, total = sum(annual)) |&gt;\n  ggplot(aes(x = Season, y = total)) +\n  geom_point() +\n  geom_smooth(se = FALSE, method = \"lm\") +\n  labs(title = \"Total Amount of Money Spent Across Seasons in EPL\",\n       subtitle = \"The league has steadily spent more money on players\",\n       y= \"Total Paid\") +\n  scale_y_continuous(labels = scales::dollar_format())\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n  scale_x_continuous(breaks = seq(2013, 2022, by = 1))\n\n&lt;ScaleContinuousPosition&gt;\n Range:  \n Limits:    0 --    1\n\n\n\nsummary(fit_1)\n\n\nModel Info:\n function:     stan_glm\n family:       gaussian [identity]\n formula:      Standing ~ Rk\n algorithm:    sampling\n sample:       4000 (posterior sample size)\n priors:       see help('prior_summary')\n observations: 200\n predictors:   2\n\nEstimates:\n              mean   sd   10%   50%   90%\n(Intercept) 3.3    0.6  2.5   3.3   4.1  \nRk          0.7    0.1  0.6   0.7   0.8  \nsigma       4.2    0.2  4.0   4.2   4.5  \n\nFit Diagnostics:\n           mean   sd   10%   50%   90%\nmean_PPD 10.5    0.4  9.9  10.5  11.0 \n\nThe mean_ppd is the sample average posterior predictive distribution of the outcome variable (for details see help('summary.stanreg')).\n\nMCMC diagnostics\n              mcse Rhat n_eff\n(Intercept)   0.0  1.0  3402 \nRk            0.0  1.0  3374 \nsigma         0.0  1.0  3574 \nmean_PPD      0.0  1.0  3938 \nlog-posterior 0.0  1.0  1768 \n\nFor each parameter, mcse is Monte Carlo standard error, n_eff is a crude measure of effective sample size, and Rhat is the potential scale reduction factor on split chains (at convergence Rhat=1)."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]
[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Final Project",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\nlibrary(readxl)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(writexl)\nlibrary(stringr)\nlibrary(rstanarm)\n\nLoading required package: Rcpp\nThis is rstanarm version 2.21.4\n- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!\n- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.\n- For execution on a local, multicore CPU with excess RAM we recommend calling\n  options(mc.cores = parallel::detectCores())\n\n\n\nprem &lt;- read_excel(\"EPL_Payroll.xlsx\")\n\n\nx &lt;- prem |&gt;\n  select(\"Season\", \"Rk\", \"Squad\", \"Annual Wages\", \"Standing\") |&gt;\n  mutate(annual = str_extract(`Annual Wages`, \"\\\\$[0-9,]+\")) |&gt;\n  mutate(annual = as.numeric(gsub(\"[$,]\", \"\", annual))) |&gt;\n  select(-`Annual Wages`)\n\n\nx\n\n# A tibble: 200 × 5\n   Season    Rk Squad          Standing    annual\n    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;     &lt;dbl&gt;\n 1   2022     6 Arsenal               2 129210591\n 2   2022     7 Aston Villa           7 127888743\n 3   2022    18 Bournemouth          15  48842265\n 4   2022    20 Brentford             9  40845084\n 5   2022    19 Brighton              6  48776174\n 6   2022     3 Chelsea              12 241567629\n 7   2022    12 Crystal Palace       11  84928703\n 8   2022     8 Everton              17 107796661\n 9   2022    13 Fulham               10  69066531\n10   2022    17 Leeds United         19  62754708\n# ℹ 190 more rows\n\n\n\nfit_1 &lt;- stan_glm(Standing ~ Rk,\n                  data = x,\n                  family = gaussian,\n                  refresh = 0)\n\n\nfit_1\n\nstan_glm\n family:       gaussian [identity]\n formula:      Standing ~ Rk\n observations: 200\n predictors:   2\n------\n            Median MAD_SD\n(Intercept) 3.3    0.6   \nRk          0.7    0.1   \n\nAuxiliary parameter(s):\n      Median MAD_SD\nsigma 4.2    0.2   \n\n------\n* For help interpreting the printed output see ?print.stanreg\n* For info on the priors used see ?prior_summary.stanreg\n\n\n\nloo(fit_1)\n\n\nComputed from 4000 by 200 log-likelihood matrix\n\n         Estimate   SE\nelpd_loo   -573.2  9.8\np_loo         2.9  0.5\nlooic      1146.4 19.6\n------\nMonte Carlo SE of elpd_loo is 0.0.\n\nAll Pareto k estimates are good (k &lt; 0.5).\nSee help('pareto-k-diagnostic') for details.\n\n\n\nnewobs &lt;- tibble(Rk = 1:20)\n\npe &lt;- posterior_epred(fit_1, newdata = newobs) |&gt; \n  as_tibble() |&gt;\n  pivot_longer(cols = `1`:`20`,\n               names_to = \"rank\",\n               values_to = \"standing\") |&gt;\n    mutate_all(as.numeric) \n\npe |&gt;\n  ggplot(aes(x = rank, y = standing)) +\n  geom_point(alpha = 0.25) \n\n\n\npe\n\n# A tibble: 80,000 × 2\n    rank standing\n   &lt;dbl&gt;    &lt;dbl&gt;\n 1     1     4.12\n 2     2     4.78\n 3     3     5.45\n 4     4     6.12\n 5     5     6.78\n 6     6     7.45\n 7     7     8.11\n 8     8     8.78\n 9     9     9.45\n10    10    10.1 \n# ℹ 79,990 more rows\n\n\n\nx |&gt;\n  ggplot(aes(x = Rk, y = Standing)) +\n  geom_jitter(alpha = 0.5) +\n  scale_x_reverse() +\n  scale_y_reverse() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(title = \"Payroll Rank vs. Season Standing in the EPL\",\n       subtitle = \"There is a positive correlation between the two\",\n       x = \"Payroll Rank\",\n       y = \"Season Standing\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nx |&gt;\n  summarise(.by = Season, total = sum(annual))\n\n# A tibble: 10 × 2\n   Season      total\n    &lt;dbl&gt;      &lt;dbl&gt;\n 1   2022 2351864079\n 2   2021 2069981063\n 3   2020 2025498304\n 4   2019 1889712734\n 5   2018 1949597032\n 6   2017 1840403917\n 7   2016 1631107618\n 8   2015 1442252520\n 9   2014 1359012308\n10   2013 1167572434\n\n\n\nx |&gt;\n  summarise(.by = Season, total = sum(annual)) |&gt;\n  ggplot(aes(x = Season, y = total)) +\n  geom_point() +\n  geom_smooth(se = FALSE, method = \"lm\") +\n  labs(title = \"Total Amount of Money Spent Across Seasons in EPL\",\n       subtitle = \"The league has steadily spent more money on players\",\n       y= \"Total Paid\") +\n  scale_y_continuous(labels = scales::dollar_format())\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n  scale_x_continuous(breaks = seq(2013, 2022, by = 1))\n\n&lt;ScaleContinuousPosition&gt;\n Range:  \n Limits:    0 --    1\n\n\n\nsummary(fit_1)\n\n\nModel Info:\n function:     stan_glm\n family:       gaussian [identity]\n formula:      Standing ~ Rk\n algorithm:    sampling\n sample:       4000 (posterior sample size)\n priors:       see help('prior_summary')\n observations: 200\n predictors:   2\n\nEstimates:\n              mean   sd   10%   50%   90%\n(Intercept) 3.3    0.6  2.5   3.3   4.1  \nRk          0.7    0.1  0.6   0.7   0.8  \nsigma       4.2    0.2  4.0   4.2   4.5  \n\nFit Diagnostics:\n           mean   sd   10%   50%   90%\nmean_PPD 10.5    0.4 10.0  10.5  11.0 \n\nThe mean_ppd is the sample average posterior predictive distribution of the outcome variable (for details see help('summary.stanreg')).\n\nMCMC diagnostics\n              mcse Rhat n_eff\n(Intercept)   0.0  1.0  3902 \nRk            0.0  1.0  3710 \nsigma         0.0  1.0  3969 \nmean_PPD      0.0  1.0  3983 \nlog-posterior 0.0  1.0  1847 \n\nFor each parameter, mcse is Monte Carlo standard error, n_eff is a crude measure of effective sample size, and Rhat is the potential scale reduction factor on split chains (at convergence Rhat=1).\n\n\n\nprem |&gt;\n  filter(Rk == 1) |&gt;\n  select(Squad, Season, Standing)\n\n# A tibble: 10 × 3\n   Squad           Season Standing\n   &lt;chr&gt;            &lt;dbl&gt;    &lt;dbl&gt;\n 1 Manchester Utd    2022        3\n 2 Manchester Utd    2021        6\n 3 Manchester Utd    2020        2\n 4 Manchester Utd    2019        3\n 5 Chelsea           2018        3\n 6 Manchester Utd    2017        2\n 7 Manchester Utd    2016        6\n 8 Manchester City   2015        4\n 9 Manchester Utd    2014        4\n10 Manchester City   2013        1"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "otherleaguetest.html",
    "href": "otherleaguetest.html",
    "title": "bundesliga",
    "section": "",
    "text": "library(readxl)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(writexl)\nlibrary(stringr)\nlibrary(rstanarm)\n\nLoading required package: Rcpp\nThis is rstanarm version 2.21.4\n- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!\n- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.\n- For execution on a local, multicore CPU with excess RAM we recommend calling\n  options(mc.cores = parallel::detectCores())\n\nlibrary(ggthemes)\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nlibrary(formattable)\n\n\nAttaching package: 'formattable'\n\nThe following object is masked from 'package:plotly':\n\n    style\n\n\n\nbundesliga &lt;- read_excel(\"Bundesliga_Payroll.xlsx\")\n\n\ny &lt;- bundesliga |&gt;\n  select(\"Season\", \"Rk\", \"Squad\", \"Annual Wages\", \"Standing\") |&gt;\n  mutate(annual = str_extract(`Annual Wages`, \"\\\\$[0-9,]+\")) |&gt;\n  mutate(annual = as.numeric(gsub(\"[$,]\", \"\", annual))) |&gt;\n  select(-`Annual Wages`)\n\n\ny\n\n# A tibble: 175 × 5\n   Season    Rk Squad          Standing    annual\n    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;     &lt;dbl&gt;\n 1   2022    11 Augsburg             15  28506518\n 2   2022     1 Bayern Munich         1 287000606\n 3   2022    18 Bochum               14  17167333\n 4   2022     2 Dortmund              2 133970796\n 5   2022     9 Eint Frankfurt        7  37133920\n 6   2022    16 Freiburg              5  21420895\n 7   2022    10 Hertha BSC           18  36543455\n 8   2022     7 Hoffenheim           12  41267203\n 9   2022    13 Köln                 11  23378187\n10   2022     4 Leverkusen            6  62688098\n# ℹ 165 more rows\n\n\n\ny_1 &lt;- y |&gt;\n  summarise(.by = Season, Rk = Rk, Squad = Squad, Standing = Standing, annual = annual, percent = annual/sum(annual))\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n\nfit_2 &lt;- stan_glm(Standing ~ Rk,\n                  data = y,\n                  family = gaussian,\n                  refresh = 0)\n\nfit_3 &lt;- stan_glm(Standing ~ Rk + percent,\n                  data = y_1,\n                  family = gaussian,\n                  refresh = 0)\n\n\nfit_2\n\nstan_glm\n family:       gaussian [identity]\n formula:      Standing ~ Rk\n observations: 175\n predictors:   2\n------\n            Median MAD_SD\n(Intercept) 3.9    0.7   \nRk          0.6    0.1   \n\nAuxiliary parameter(s):\n      Median MAD_SD\nsigma 4.3    0.2   \n\n------\n* For help interpreting the printed output see ?print.stanreg\n* For info on the priors used see ?prior_summary.stanreg\n\nfit_3\n\nstan_glm\n family:       gaussian [identity]\n formula:      Standing ~ Rk + percent\n observations: 175\n predictors:   3\n------\n            Median MAD_SD\n(Intercept)   8.0    1.3 \nRk            0.3    0.1 \npercent     -31.9    9.0 \n\nAuxiliary parameter(s):\n      Median MAD_SD\nsigma 4.1    0.2   \n\n------\n* For help interpreting the printed output see ?print.stanreg\n* For info on the priors used see ?prior_summary.stanreg\n\n\n\nloo_compare(loo(fit_2), loo(fit_3))\n\n      elpd_diff se_diff\nfit_3  0.0       0.0   \nfit_2 -5.4       1.9   \n\n\n\nnewobs &lt;- tibble(Rk = 1:20)\n\npe_2 &lt;- posterior_epred(fit_2, newdata = newobs) |&gt; \n  as_tibble() |&gt;\n  pivot_longer(cols = `1`:`20`,\n               names_to = \"rank\",\n               values_to = \"standing\") |&gt;\n  mutate_all(as.numeric)\n\npe_2 |&gt;\n  ggplot(aes(x = rank, y = standing)) +\n  geom_point(alpha = 0.5) \n\n\n\npe_2\n\n# A tibble: 80,000 × 2\n    rank standing\n   &lt;dbl&gt;    &lt;dbl&gt;\n 1     1     4.11\n 2     2     4.78\n 3     3     5.44\n 4     4     6.10\n 5     5     6.76\n 6     6     7.42\n 7     7     8.08\n 8     8     8.74\n 9     9     9.40\n10    10    10.1 \n# ℹ 79,990 more rows\n\n\n\ny_1 &lt;- y |&gt;\n  ggplot(aes(x = Rk, y = Standing)) +\n  geom_jitter(alpha = 0.5) +\n  scale_x_reverse(breaks = seq(20, 1, by = -1)) +\n  scale_y_reverse(breaks = seq(20, 1, by = -1)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(title = \"Payroll Rank vs. Season Standing in the Bundesliga\",\n       subtitle = \"There is a positive correlation between the two\",\n       x = \"Payroll Rank\",\n       y = \"Season Standing\") \n\n\ny_1 |&gt;\n  ggplotly()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\ntop5 &lt;- read_excel(\"Top5Leagues_Payroll.xlsx\")\ntop5\n\n# A tibble: 1,052 × 10\n   League Season    Rk Squad  `# Pl` `Weekly Wages` `Annual Wages` `% Estimated`\n   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;                  &lt;dbl&gt;\n 1 EPL      2022     6 Arsen…     69 £ 1,955,000 (… £ 101,660,000…          0.07\n 2 EPL      2022     7 Aston…     81 £ 1,935,000 (… £ 100,620,000…          0.23\n 3 EPL      2022    18 Bourn…     83 £ 739,000 (€ … £ 38,428,000 …          0.55\n 4 EPL      2022    20 Brent…     75 £ 618,000 (€ … £ 32,136,000 …          0.75\n 5 EPL      2022    19 Brigh…     70 £ 738,000 (€ … £ 38,376,000 …          0.69\n 6 EPL      2022     3 Chels…     86 £ 3,655,000 (… £ 190,060,000…          0.16\n 7 EPL      2022    12 Cryst…     73 £ 1,285,000 (… £ 66,820,000 …          0.48\n 8 EPL      2022     8 Evert…     80 £ 1,631,000 (… £ 84,812,000 …          0.45\n 9 EPL      2022    13 Fulham     72 £ 1,045,000 (… £ 54,340,000 …          0.42\n10 EPL      2022    17 Leeds…     78 £ 949,500 (€ … £ 49,374,000 …          0.7 \n# ℹ 1,042 more rows\n# ℹ 2 more variables: Standing &lt;dbl&gt;, `Squad (again)` &lt;chr&gt;\n\n\n\na &lt;- top5 |&gt;\n  select(-c(\"# Pl\", \"Weekly Wages\", \"% Estimated\", \"Squad (again)\")) |&gt;\n  mutate(annual = str_extract(`Annual Wages`, \"\\\\$[0-9,]+\")) |&gt;\n  mutate(annual = as.numeric(gsub(\"[$,]\", \"\", annual))) |&gt;\n  select(-`Annual Wages`) |&gt;\n  filter(Season &gt;= 2013) |&gt;\n  summarise(.by = c(League, Season), total = sum(annual))\n\n\na |&gt;\n  ggplot(aes(x = Season, y = total, color = League)) +\n  geom_point() +\n  geom_line() +\n  theme_classic()\n\n\n\n\n\nb &lt;- top5 |&gt;\n  select(-c(\"# Pl\", \"Weekly Wages\", \"% Estimated\", \"Squad (again)\")) |&gt;\n  mutate(annual = str_extract(`Annual Wages`, \"\\\\$[0-9,]+\")) |&gt;\n  mutate(annual = as.numeric(gsub(\"[$,]\", \"\", annual))) |&gt;\n  select(-`Annual Wages`) |&gt;\n  filter(Season &gt;= 2013, Standing &lt;= 4 | Standing &gt;= 18) |&gt;\n  mutate(top = Standing &lt;= 4)\n\n\nc &lt;- b |&gt;\n  ggplot(aes(x = Season, y = annual, color = top, text = paste(\"Season:\", Season, \"\\n\", \n                                                               \"Payroll:\", currency(annual), \"\\n\",\n                                                               \"Standing:\", Standing, \"\\n\",\n                                                               \"Team:\", Squad))) +\n  geom_point(alpha = 0.5) +\n  scale_y_continuous(labels = scales::dollar_format()) +\n  labs(title = \"Payroll of Top Four vs Bottom Three Teams in Each Season\",\n       subtitle = \"The payroll gap of top from bottom has steadily increased\",\n       y = \"Payroll\",\n       color = \"Top Four\")\n\n\nc |&gt;\n  ggplotly(tooltip = \"text\")"
  }
]